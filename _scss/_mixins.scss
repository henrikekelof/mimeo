
// NOTE! This file should not directly output CSS. Only vars, functions and mixins.
// Use _placeholders.scss for placeholders that generate CSS.


// ==|== functions ===================================================== //

@function pxToEm($target-px, $context: $FontBaseSizePx) {
    @return ($target-px / $context) * 1em;
}



// ==|== constants ===================================================== //

$BROWSER_DEFAULT_FONT_SIZE_PX: 16px;

$FontBaseSizePx: 22px;
$FontBaseSize: ($FontBaseSizePx / $BROWSER_DEFAULT_FONT_SIZE_PX) * 1em;
$BaseLineHeight: (30 / 22);

$SITE_MAX_WIDTH: 680px; // NOTE! See breakpoints below!

//	// NOTE! If you change one of these breakpoints you must also change the pixel
//	// value in LIB.breakpoints (adlibris.js)

$MEDIUM: 500px;
$LARGE: $SITE_MAX_WIDTH;
$XLARGE: 768px;

$BREAKPOINT_MEDIUM: pxToEm($MEDIUM, $FontBaseSizePx);
$BREAKPOINT_LARGE: pxToEm($LARGE, $FontBaseSizePx);
$BREAKPOINT_XLARGE: pxToEm($XLARGE, $FontBaseSizePx);

// ==|== Settings & Variables ============================= //

// Font families

$Serif: Serif;

$SansSerif: "HelveticaNeue", "Helvetica Neue", "HelveticaNeueRoman", "HelveticaNeue-Roman", "Helvetica Neue Roman", "Segoe UI", Arial, Helvetica, Sans-serif;

// Font sizes etc.



// Colours

$white: #FFF;
$black: #000;



// ==|== CSS3 Mixins ===================================================== //


@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}


@mixin background-size($xy) {
    $x: nth($xy, 1);
    $y: 0;
    @if length($xy) == 1 {
        $y: $x;
    } @else {
        $y: nth($xy, 2);
    }
    background-size: $x $y;
    // Must enter both width and size in prefixed version for Android 2.1!
    -webkit-background-size: $x $y;
}

// ==|== Custom Mixins ===================================================== //


// ==|== Media Queries and Named Media Queries ===================================================== //


@mixin media-min-width($target) {
    @if not $IE8 {
        @media (min-width: $target) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@mixin media-max-width($target) {
    // We're keeping this media query for all browsers so IE7 and 8 never sees this.
    @media (max-width: $target) {
        @content;
    }
}

@mixin media-xlarge {
    @if not $IE8 {
        @media (min-width: $BREAKPOINT_XLARGE) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@mixin media-large {
    @if not $IE8 {
        @media (min-width: $BREAKPOINT_LARGE) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@mixin media-medium {
    @if not $IE8 {
        @media (min-width: $BREAKPOINT_MEDIUM) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@mixin media-small {
    @if not $IE8 {
        @media (min-width: $BREAKPOINT_SMALL) {
            @content;
        }
    }
    @else {
        @content;
    }
}


// ==|== Mixins with different output for IE8 ===================================================== //

@function rem($px) {
    @if not $IE8 {
        @return ($px / $BROWSER_DEFAULT_FONT_SIZE_PX) * 1rem;
    }
    @else {
        @return $px;
    }
}


// ==|== Viewport ===================================================== //

// For some reason, this mixin breaks intellisense for every mixin that
// comes after. It needs to go last in the file when using Visual Studio!

@mixin viewport($w: device-width) {
@-webkit-viewport { width : $w }
@-moz-viewport { width : $w }
@-ms-viewport { width : $w }
@-o-viewport { width : $w }
@viewport { width : $w }
}





